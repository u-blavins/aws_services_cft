{
    "S3BucketTemplate": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
            "AccelerateConfiguration": {
                "AccelerationStatus": "Enabled | Suspended"
            },
            "AccessControl": "private | public-read | public-read-write | aws-exec-read | authenticated-read | bucket-owner-read | bucket-owner-full-control | log-delivery-write",
            "AnalyticsConfiguration": {
                "Id": "AnalyticsConfigurationID",
                "Prefix": "Prefix that object must have to be included",
                "StorageClassAnalysis": {
                    "DataExport": {
                       "Destination": {
                           "BucketAccountId": "Account ID of destination bucket",
                           "BucketArn": "Arn of bucket to export to",
                           "Format": "File format",
                           "Prefix": "Prefix for exporting"
                       },
                       "OutputSchemaVersion": "V_1 - Must be this"
                    }
                },
                "TagFilters": [
                    {
                        "Key": "key",
                        "Value": "value"
                    }
                ]
            },
            "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                    {
                        "ServerSideEncryptionByDefault": {
                            "SSEAlgorithm": "AES256 | aws:kms",
                            "KMSMasterKeyID": "ID of KMS Key if aws:kms selected"
                        }
                    }
                ]
            },
            "BucketName": "Name of bucket",
            "CorsConfiguration": {
                "CorsRules": [
                    {
                        "AllowedHeaders": [
                            "Headers specified in Access-Control-Request-Headers"
                        ],
                        "AllowedMethods": [
                            "GET", "PUT", "HEAD", "POST", "DELETE"
                        ],
                        "AllowedOrigins": [
                            "Specify origins wanted for cross-domain requests from"
                        ],
                        "ExposedHeaders": [
                            "header in response that customers are able to access from apps"
                        ],
                        "Id": "CORS Rule Id",
                        "MaxAge": "Time in seconds for browser to cache response"
                    }
                ]
            },
            "InventoryConfigurations": [
                {
                    "Destination": {
                        "BucketAccountId": "Account ID of destination bucket",
                        "BucketArn": "Arn of bucket to export to",
                        "Format": "File format",
                        "Prefix": "Prefix for exporting"
                    },
                    "Enabled": "True | False",
                    "Id": "Inventory Configuration ID",
                    "IncludedObjectVersions": "All | Current",
                    "OptionalFields": [
                        "Size | LastModifiedDate | StorageClass | ETag | ",
                        "IsMultipartUploaded | ReplicationStatus | EncryptionStatus ",
                        "| ObjectLockRetainUntilDate | ObjectLockMode |",
                        " ObjectLockLegalHoldStatus | IntelligentTieringAccessTier"
                    ],
                    "Prefix": "Prefix prepended to inventory results",
                    "ScheduleFrequency": "Daily | Weekly"
                }
            ],
            "LifecycleConfiguration": {
                "Rules": [
                    {
                        "AbortIncompleteMultipartUpload" : {
                            "DaysAfterInitiation": "Integer of days which S3 aborts incomplete mp upload"
                        },
                        "ExpirationDate" : "Timestamp when objects deleted from S3 - ISO 8601",
                        "ExpirationInDays" : "Integer days after creation when objects deleted",
                        "Id" : "Rule ID",
                        "NoncurrentVersionExpirationInDays" : "Integer same as current but for versioned objects",
                        "NoncurrentVersionTransition" : {
                            "StorageClass": "DEEP_ARCHIVE | GLACIER | INTELLIGENT_TIERING | ONEZONE_IA | STANDARD_IA",
                            "TransistionInDays": "Integer days before S3 performs transistion to Storage Class"
                        },
                        "NoncurrentVersionTransitions" : [
                            {
                                "StorageClass": "DEEP_ARCHIVE | GLACIER | INTELLIGENT_TIERING | ONEZONE_IA | STANDARD_IA",
                                "TransistionInDays": "Integer days before S3 performs transistion to Storage Class"
                            }
                        ],
                        "Prefix" : "Object key prefix that identifies one or more objects",
                        "Status" : "Enabled | Disabled",
                        "TagFilters" : [
                            {
                                "Key": "key",
                                "Value": "value"
                            }
                        ],
                        "Transition" : {
                            "StorageClass" : "DEEP_ARCHIVE | GLACIER | INTELLIGENT_TIERING | ONEZONE_IA | STANDARD_IA",
                            "TransitionDate" : "Timestamp S3 performs transistion to Storage Clas",
                            "TransitionInDays" :  "Integer days before S3 performs transistion to Storage Class"
                        },
                        "Transitions" : [
                            {
                                "StorageClass" : "DEEP_ARCHIVE | GLACIER | INTELLIGENT_TIERING | ONEZONE_IA | STANDARD_IA",
                                "TransitionDate" : "Timestamp S3 performs transistion to Storage Clas",
                                "TransitionInDays" :  "Integer days before S3 performs transistion to Storage Class"
                            }
                        ]
                    }
                ]
            },
            "LoggingConfiguration": {
                "DestinationBucketName": "Name of bucket where S3 stores access log files",
                "LogFilePrefix": "Prefix for all log object keys"
            },
            "MetricsConfigurations": [
                {
                    "Id": "Metric configuration ID",
                    "Prefix": "Prefix that object must have to be included for metrics",
                    "TagFilters": [
                        {
                            "Key": "key",
                            "Value": "value"
                        }
                    ]
                }
            ],
            "NotificationConfiguration": {
                "LambdaConfigurations": [
                    {
                        "Event": "Bucket event to invoke lambda",
                        "Filter": {
                            "S3Key": {
                                "Rules": [
                                    {
                                        "Name": "prefix | suffix",
                                        "Value": "filter search value for object key names"
                                    }
                                ]
                            }
                        },
                        "Function": "arn of lambda function to call"
                    }
                ],
                "QueueConfigurations": [
                    {
                        "Event": "Bucket event to publish message to queue",
                        "Filter": {
                            "S3Key": {
                                "Rules": [
                                    {
                                        "Name": "prefix | suffix",
                                        "Value": "filter search value for object key names"
                                    }
                                ]
                            }
                        },
                        "Function": "arn of sqs queue"
                    }
                ],
                "TopicConfigurations": [
                    {
                        "Event": "Bucket event to send notification to topic",
                        "Filter": {
                            "S3Key": {
                                "Rules": [
                                    {
                                        "Name": "prefix | suffix",
                                        "Value": "filter search value for object key names"
                                    }
                                ]
                            }
                        },
                        "Function": "arn of sns topic"
                    }
                ]
            },
            "ObjectLockConfiguration": {
                "ObjectLockEnabled": "Enabled - or not included if no object lock",
                "Rule": {
                    "DefaultRetention": {
                        "Days": "Integer days for default retention",
                        "Mode": "COMPLIANCE | GOVERNANCE - retention mode GOV - object lock can be removed",
                        "Years": "Integer years for default retention"
                    }
                }
            },
            "ObjectLockEnabled": "Enabled - if configuration present",
            "PublicAccessConfiguration": {  
                "BlockPublicAcls" : "True | False - True for block",
                "BlockPublicPolicy" : "True | False - True for block",
                "IgnorePublicAcls" : "True | False - True for block",
                "RestrictPublicBuckets" : "True | False - True for block"
            },
            "ReplicationConfiguration": {
                "Role": "arn of IAM role",
                "Rules": [
                    {
                        "Destination": {
                            
                        }
                    }
                ]
            }
        }
    }
}